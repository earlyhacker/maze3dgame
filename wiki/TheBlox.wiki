#summary noties of bloxer

= Введение =

И так мы подошли к тому что надо быстро собрать рабочую и пригодную для играния игру =) И встал вопрос о загрузке моделей. 

= Основная концепция =

И так, у меня есть такой набросок кода - 
{{{
class TheBlox
{
public:
	TheBlox
	{
		firstpath = "Data/Model/";
	}
	void OpenModelFile(const char* FilePath);
	void RenderIt(int ModelID);
	void CleanRender(int ModelID);
	
	int ModelID[128];
	const char* firstpath // начальная часть пути.
	
};	
// и его реализация 
TheBlox::OpenModelFile(const char* FilePath)
{
	int pc; // point count
	char* line;
	freopen((firstpath+FilePath),"r", stdin);
	cin >> pc;
	float Model = new float[pc];
	for (int i =0; i <pc; i++)
	{
		cin >> line;
		if (line == "/commet")
			cin >> "\n";// что-то вроде перейди на
                                    //след.строку
		if (line == "/vertex")
			cin >> Model[i];
		if (line == "/end")
			break;
	}
} 
}}}}

Есть массив для хранения точек в модели. Предположительно модели Low-level, поэтому дополнительные сведения для проведения линий между точками не нужны.
Переменная Line служит для считывания служебных команд.

Нужно чтоб при команде /vertex считывались 3 параметра точки - x, y, z. Соответственно в массив типа float. При этом можно обратиться к осям примерно так же как в пирамидальной сортировке (некоторые тонкости прим.ред.)
И при команде //end мы выходили. 

== Вид файла с моделькой ==
{{{
//comment blah blah blah
//vertex 0.0 0.0 0.0
//vertex 1.0 0.0 0.0
...
//end
}}}